from __future__ import unicode_literals

from wtforms import Form
from wtforms import TextField
from wtforms import PasswordField
from wtforms import SelectMultipleField
from wtforms import validators
from wtforms.widgets.core import html_params
from wtforms.widgets.core import HTMLString

from {{package}}.modules.forms import similar
from {{package}}.i18n import LocalizerFactory

get_localizer = LocalizerFactory()


class CheckboxList(object):
    """
    Renders a checkbox list field.

    If `multiple` is True, then the `size` property should be specified on
    rendering to make the field useful.

    The field must provide an `iter_choices()` method which the widget will
    call on rendering; this method must yield tuples of
    `(value, label, selected)`.
    """
    def __init__(self, multiple=False):
        self.multiple = multiple

    def __call__(self, field, **kwargs):
        kwargs.setdefault('id', field.id)
        if self.multiple:
            kwargs['multiple'] = True
        html = ['<ul %s>' % html_params(**kwargs)]
        for val, label, selected in field.iter_choices():
            html.append(self.render_option(field.name, val, label, selected))
        html.append('</ul>')
        return HTMLString(''.join(html))

    @classmethod
    def render_option(cls, name, value, label, selected, **kwargs):
        from cgi import escape
        options = dict(
            kwargs, 
            value=value,
            type='checkbox',
            id='%s-%s' % (name, value),
            name=name
        )
        if selected:
            options['checked'] = True
        return HTMLString(
            """\
            <li>
                <div class="checkbox">'
                    <label>
                        <input {params}></input>
                        {label}
                    </label>
                </div>
            </li>
            """
            .format(
                params=html_params(**options),
                label=escape(unicode(label)),
            )
        )


class FormFactory(object):
    
    def __init__(self, localizer):
        self.localizer = localizer
        _ = self.localizer
        self.required_msg = _('This field is required.')
        self.invalid_email_msg = _('Invalid email address.')
        self.password_not_match_msg = _('Password must match')
        self.password_too_similar_msg = \
            _('Password is too similar to user name.')
    
    def make_user_create_form(self):
        _ = self.localizer
        
        class UserCreateForm(Form):
            user_name = TextField(
                _('User name'), 
                [
                    validators.Required(self.required_msg),
                ]
            )
            display_name = TextField(_('Display name'), [])
            password = PasswordField(
                _('Password'), 
                [
                    validators.Required(self.required_msg),
                    similar('user_name', self.password_too_similar_msg),
                    similar('display_name', self.password_too_similar_msg),
                    validators.Length(min=6)
                ]
            )
            email = TextField(
                _('Email'), 
                [
                    validators.Email(self.invalid_email_msg)
                ]
            )
            groups = SelectMultipleField(_('Groups'), widget=CheckboxList())
        return UserCreateForm
    
    def make_user_edit_form(self):
        _ = self.localizer
        
        class UserEditForm(Form):
            display_name = TextField(_('Display name'), [])
            password = PasswordField(
                _('Password'), 
                [
                    #similar('user_name', self.password_too_similar_msg),
                    # TODO: check is password similar to user_name here
                    # validators.Length(min=6)
                ]
            )
            email = TextField(
                _('Email'), [
                    validators.Email(self.invalid_email_msg)
                ]
            )
            groups = SelectMultipleField(_('Groups'), widget=CheckboxList())
        return UserEditForm
    
    def make_group_create_form(self):
        _ = self.localizer
        
        class GroupCreateForm(Form):
            group_name = TextField(
                _('Group name'), [
                    validators.Required(self.required_msg),
                ]
            )
            display_name = TextField(_('Display name'), [])
            permissions = SelectMultipleField(
                _('Permissions'), 
                widget=CheckboxList()
            )
        return GroupCreateForm
    
    def make_group_edit_form(self):
        _ = self.localizer
        
        class GroupEditForm(Form):
            group_name = TextField(
                _('Group name'), 
                [
                    validators.Required(self.required_msg),
                ]
            )
            display_name = TextField(_('Display name'), [])
            permissions = SelectMultipleField(
                _('Permissions'), 
                widget=CheckboxList()
            )
        return GroupEditForm
    
    def make_permission_create_form(self):
        _ = self.localizer
        
        class PermissionCreateForm(Form):
            permission_name = TextField(
                _('Permission name'), 
                [
                    validators.Required(self.required_msg),
                ]
            )
            display_name = TextField(_('Display name'), [])
        return PermissionCreateForm
    
    def make_permission_edit_form(self):
        _ = self.localizer
        
        class PermissionEditForm(Form):
            permission_name = TextField(
                _('Permission name'), 
                [
                    validators.Required(self.required_msg),
                ]
            )
            display_name = TextField(_('Display name'), [])
        return PermissionEditForm
