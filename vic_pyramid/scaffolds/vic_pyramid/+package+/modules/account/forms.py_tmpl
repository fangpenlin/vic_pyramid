from wtforms import Form
from wtforms import TextField
from wtforms import PasswordField
from wtforms import HiddenField
from wtforms import validators

from {{project}}.i18n import LocalizerFactory

get_localizer = LocalizerFactory()


class FormFactory(object):
    
    def __init__(self, localizer):
        self.localizer = localizer
        _ = self.localizer
        self.required_msg = _(u'This field is required.')
        self.invalid_email_msg = _(u'Invalid email address.')
        self.password_not_match_msg = _(u'Password must match')
        
    def make_login_form(self):
        _ = self.localizer
        
        class LoginForm(Form):
            username_or_email = TextField(_(u'Username or Email'), [
                validators.Required(self.required_msg),
            ])
            password = PasswordField(_(u'Password'), [
                validators.Required(self.required_msg),
            ])
        return LoginForm

    def make_forgot_password_form(self):
        _ = self.localizer

        class ForgotPasswordForm(Form):
            email = TextField(_(u'Email'), [
                validators.Required(self.required_msg),
                validators.Email(self.invalid_email_msg)
            ])
        return ForgotPasswordForm
    
    def make_recovery_password_form(self):
        _ = self.localizer

        class RecoveryPasswordForm(Form):
            new_password = PasswordField(_(u'Password'), [
                validators.Required(self.required_msg),
                validators.Length(min=6)
            ])
            new_password_confirm = PasswordField(_(u'Confirm Password'), [
                validators.Required(self.required_msg),
                validators.EqualTo('new_password', 
                                   message=self.password_not_match_msg)
            ])
            user_name = HiddenField()
            code = HiddenField()
        return RecoveryPasswordForm
