from __future__ import unicode_literals
import urllib

import transaction
from pyramid.view import view_config
from pyramid.security import remember
from pyramid.security import forget
from pyramid.security import authenticated_userid
from pyramid.httpexceptions import HTTPFound
from pyramid.httpexceptions import HTTPNotFound
from pyramid.httpexceptions import HTTPBadRequest
from pyramid.httpexceptions import HTTPForbidden

from {{package}}.models.user import UserModel
from {{package}}.mail import render_mail
from {{package}}.mail import send_mail
from {{package}}.utils import check_csrf_token
from ..base import BaseView
from .forms import FormFactory


class AccountView(BaseView):

    FormFactory = FormFactory

    @view_config(route_name='account.login',
                 renderer='templates/login.genshi')
    @view_config(context='pyramid.httpexceptions.HTTPForbidden',
                 renderer='templates/login.genshi')
    def login(self):
        """Display login form or do login
        
        mainly borrowed from
        https://docs.pylonsproject.org/projects/pyramid/1.1/tutorials/wiki/authorization.html?highlight=login#adding-login-and-logout-views
        
        """
        _ = self.localizer
        request = self.request

        referrer = request.url
        my_url = request.route_url('account.login')
        if referrer == my_url:
            referrer = request.route_url('front.home')
            # never use the login form itself as came_from
        came_from = request.params.get('came_from', referrer)
        
        name_or_email = ''
        password = ''
        
        form = self.form_factory.make_login_form()(request.params)
        
        if request.method == 'POST' and form.validate():
            name_or_email = request.params['name_or_email']
            password = request.params['password']
            session = request.db_session
            user_model = UserModel(session)

            pwd_result = False
            user = user_model.get_by_name_or_email(name_or_email)
            if user is not None:
                pwd_result = user_model.validate_password(user, password)
            if not pwd_result:
                msg = _('Wrong username or password')
                request.add_flash(msg, 'error')
                request.response.status = 403
                return dict(
                    came_from=came_from,
                    name_or_email=name_or_email,
                    password=password,
                    form=form,
                )
                
            headers = remember(request, user.user_id)
            msg = _('Welcome back, ${user_name}',
                    mapping=dict(user_name=user.user_name))
            request.add_flash(msg)
            return HTTPFound(location=came_from,
                             headers=headers)

        return dict(
            came_from=came_from,
            name_or_email=name_or_email,
            password=password,
            form=form,
        )

    @view_config(route_name='account.logout')
    def logout(self):
        _ = self.localizer
        request = self.request
        
        referrer = request.referrer
        my_url = request.route_url('account.logout')
        # never use the login form itself as came_from
        # or, there is no referer
        if referrer == my_url or not referrer:
            referrer = request.route_url('front.home')
        came_from = request.params.get('came_from', referrer)
        
        session = request.db_session
        user_model = UserModel(session)
        user_id = authenticated_userid(request)
        if user_id is None:
            raise HTTPBadRequest('You are not logged in')
        
        user = user_model.get(user_id)
        if user is None:
            raise HTTPBadRequest
        
        headers = forget(request)
        name = user.display_name or user.user_name
        msg = _("Hope we will see you soon, ${user_name}",
                mapping=dict(user_name=name))
        
        request.add_flash(msg)
        return HTTPFound(location=came_from,
                         headers=headers)

    @view_config(route_name='account.register',
                 renderer='templates/register.genshi')
    def register(self):
        _ = self.localizer
        request = self.request
        settings = request.registry.settings
        
        user_model = UserModel(request.db_session)
        form = self.form_factory.make_register_form()(request.params)
        
        if request.method == 'POST':
            check_csrf_token(request)
            
            validate_result = form.validate()
            user_name = request.params['user_name']
            password = request.params['password']
            email = request.params['email']

            black_domain = set(settings.get('email_black_domain_list', []))
            domain = email.split('@')[-1].lower()
            if domain in black_domain:
                msg = _('Invalid email address')
                form.email.errors.append(msg)
                validate_result = False
            
            by_name = user_model.get_by_name(user_name)
            if by_name is not None:
                msg = _('Username %s already exists') % user_name
                form.user_name.errors.append(msg)
                validate_result = False
                
            by_email = user_model.get_by_email(email)
            if by_email is not None:
                msg = _('Email %s already exists') % email
                form.email.errors.append(msg)
                validate_result = False

            if validate_result:
                with transaction.manager:
                    user = user_model.create(
                        user_name=user_name,
                        display_name=user_name,
                        password=password,
                        email=email,
                    )
                    
                    auth_secret_key = settings['auth_secret_key']
                    code = user_model.get_verification_code(
                        user=user, 
                        verify_type='create_user',
                        secret=auth_secret_key
                    )
                    link = request.route_url(
                        'account.activate', 
                        user_name=user_name, 
                        code=code
                    )
                    params = dict(link=link, user_name=user_name)
                    html = render_mail(
                        request, 
                        '{{package}}:templates/mails/register_link.genshi', 
                        params
                    )
                    
                    subject = _('{{package}} account activation')
                    send_mail(
                        request=request,
                        subject=subject,
                        to_addresses=[email],
                        format='html',
                        body=html
                    )
                
                msg = _("User ${user_name} has been registered",
                        mapping=dict(user_name=user_name))
                request.add_flash(msg, 'success')
                return HTTPFound(location=request.route_url('account.check_mailbox'))
        
        return dict(form=form)

    @view_config(route_name='account.check_mailbox',
                 renderer='templates/check_mailbox.genshi')
    def check_mailbox(self):
        return dict()

    @view_config(route_name='account.activate',
                 renderer='templates/activate.genshi')
    def activate(self):
        _ = self.localizer
        request = self.request
        settings = request.registry.settings
        
        user_model = UserModel(request.db_session)
        
        code = request.matchdict['code']
        user_name = request.matchdict['user_name']
        user = user_model.get_by_name(user_name)
        
        auth_secret_key = settings['auth_secret_key']
        valid_code = user_model.get_verification_code(
            user=user,
            verify_type='create_user',
            secret=auth_secret_key
        )
        
        if valid_code != code:
            msg = _("Invalid activation link",
                    mapping=dict(user_name=user_name))
            return HTTPForbidden(msg)
        
        if not user.verified:
            with transaction.manager:
                user_model.update(user, verified=True)
        
        msg = _("User ${user_name} is activated",
                mapping=dict(user_name=user_name))
        request.add_flash(msg, 'success')
        return dict()

    @view_config(route_name='account.forgot_password',
                 renderer='templates/forgot_password.genshi')
    def forgot_password(self):
        """Display forgot password form or do the password recovery
        
        """
        _ = self.localizer
        request = self.request
        settings = request.registry.settings
        
        form = self.form_factory.make_forgot_password_form()(request.params)
        session = request.db_session
        user_model = UserModel(session)

        if request.method == 'POST' and form.validate():
            email = request.params['email']
            
            user = user_model.get_by_email(email)
            if user is None:
                msg = _('Cannot find the user')
                form.email.errors.append(msg)
                return dict(form=form)
            
            user_name = user.user_name
                
            # TODO: limit frequency here

            # generate verification
            auth_secret_key = settings['auth_secret_key']
            code = user_model.get_recovery_code(user, auth_secret_key)
            
            link = request.route_url('account.recovery_password')
            query = dict(user_name=user_name, code=code)
            link = link + '?' + urllib.urlencode(query)

            params = dict(link=link, user_name=user_name)
            html = render_mail(
                request,
                '{{package}}:templates/mails/password_recovery.genshi',
                params
            )
            
            send_mail(
                request=request,
                subject=_('{{package}} password recovery'),
                to_addresses=[email],
                format='html',
                body=html
            )
            request.add_flash(_('To reset your password, please check your '
                                'mailbox and click the password recovery link'))
            
        return dict(form=form)

    @view_config(route_name='account.recovery_password',
                 renderer='templates/recovery_password.genshi')
    def recovery_password(self):
        """Display password recovery form or do the password change
        
        """
        _ = self.localizer
        request = self.request
        settings = request.registry.settings
        
        user_model = UserModel(request.db_session)
        
        user_name = request.params['user_name']
        code = request.params['code']

        user = user_model.get_by_name(user_name)
        if user is None:
            return HTTPNotFound(_('No such user %s') % user_name)

        # generate verification
        auth_secret_key = settings['auth_secret_key']
        valid_code = user_model.get_recovery_code(user, auth_secret_key)

        if code != valid_code:
            return HTTPForbidden(_('Bad password recovery link'))

        form = self.form_factory.make_recovery_password_form()(
            request.params,
            user_name=user_name,
            code=code,
        )
        
        invalid_msg = _('Invalid password recovery link')
        redirect_url = request.route_url('front.home')

        user = user_model.get_by_name(user_name)
        if user is None:
            request.add_flash(invalid_msg, 'error')
            raise HTTPFound(location=redirect_url)
        
        if request.method == 'POST' and form.validate():
            new_password = request.POST['new_password']

            with transaction.manager:
                user_model.update(user, password=new_password)

            msg = _('Your password has been updated')
            request.add_flash(msg, 'success')
            raise HTTPFound(location=redirect_url)

        return dict(form=form)
