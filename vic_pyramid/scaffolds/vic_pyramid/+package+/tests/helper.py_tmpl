from __future__ import unicode_literals


def create_session(echo=False):
    """Create engine and session, return session then
    
    """
    from sqlalchemy import create_engine
    from sqlalchemy.orm import scoped_session
    from sqlalchemy.orm import sessionmaker
    from zope.sqlalchemy import ZopeTransactionExtension
    from {{package}}.models.tables import DeclarativeBase 
    
    engine = create_engine('sqlite:///', convert_unicode=True, echo=echo)
    DeclarativeBase.metadata.bind = engine
    DeclarativeBase.metadata.create_all()

    session = scoped_session(sessionmaker(
        autocommit=False,
        autoflush=False,
        bind=engine,
        extension=ZopeTransactionExtension()
    ))
    return session


def set_db_settings(settings):
    from sqlalchemy import engine_from_config
    from sqlalchemy.orm import scoped_session
    from sqlalchemy.orm import sessionmaker
    from zope.sqlalchemy import ZopeTransactionExtension
    
    engine = engine_from_config(settings, 'sqlalchemy.write.')
    settings['read_engine'] = engine
    settings['write_engine'] = engine
    
    write_session = scoped_session(sessionmaker(
        extension=ZopeTransactionExtension(),
        bind=settings['read_engine']
    ))
    
    zt = ZopeTransactionExtension()

    def before_commit(session):
        assert False, "Read session cannot be wrote"

    zt.before_commit = before_commit
    read_maker = sessionmaker(
        extension=zt,
        bind=settings['read_engine']
    )
    read_session = scoped_session(read_maker)

    def stop_write(self):
        assert False, "Read session cannot be wrote"

    read_session._old_flush = read_session.flush
    read_session.commit = stop_write
     
    settings['read_session_maker'] = read_session
    settings['write_session_maker'] = write_session


def init_testing_env(settings):
    from webtest import TestApp
    from .. import main
    
    set_db_settings(settings)
    app = main({}, **settings)
    testapp = TestApp(app)
    testapp.settings = settings
    testapp.Session = settings['write_session_maker']
    testapp.session = testapp.Session()
    
    from ..models.tables import DeclarativeBase
    DeclarativeBase.metadata.create_all(bind=testapp.session.get_bind())
    return testapp
