# -*- coding: utf8 -*-
from __future__ import unicode_literals

import transaction

from {{package}}.models.user import UserModel
from {{package}}.models.group import GroupModel
from {{package}}.models.permission import PermissionModel
from .helper import ViewTestCase


class TestAdminView(ViewTestCase):
    def setUp(self):
        super(TestAdminView, self).setUp()
        user_model = UserModel(self.testapp.session)
        group_model = GroupModel(self.testapp.session)
        permission_model = PermissionModel(self.testapp.session)
        with transaction.manager:
            user_model.create(
                user_name='tester', 
                display_name='tester', 
                password='testerpass', 
                email='tester@example.com'
            )
            admin = user_model.create(
                user_name='admin', 
                display_name='admin', 
                password='adminpass', 
                email='admin@example.com'
            )
            group = group_model.create(
                group_name='admin', 
                display_name='admin', 
            )
            permission = permission_model.create(
                permission_name='admin', 
                display_name='admin'
            )
            group_model.update(group, permissions=[permission])
            user_model.update(user=admin, groups=[group])

    def get_csrf_token(self, res):
        input = res.html.find('input', dict(name='csrf_token'))
        self.assert_(input)
        return input['value']

    def login_user(self, name_or_email='tester', password='testerpass'):
        """Login as user and return cookie
        
        """
        params = dict(
            name_or_email=name_or_email, 
            password=password
        )
        self.testapp.post('/login', params)
        
    def logout(self):
        self.testapp.get('/logout')
        
    def assert_access_success(self, name, password):
        """Assert login success
        
        """
        params = dict(
            name_or_email=name, 
            password=password
        )
        self.testapp.post('/login', params, status='3*')
        
    def assert_access(self, url, result):
        """Assert login failed
        
        """
        res = self.testapp.get(url, status=200)
        # we should find login form in the page
        found = False
        for form in res.forms.itervalues():
            if form.action.endswith('/login'):
                found = True
                break
        self.assertEqual(not found, result)
    
    def test_access(self):
        def assert_access_all(result):
            self.assert_access('/admin/', result)
            
            self.assert_access('/admin/user/list', result)
            self.assert_access('/admin/user/create', result)
            self.assert_access('/admin/user/edit/tester', result)
            
            self.assert_access('/admin/group/list', result)
            self.assert_access('/admin/group/create', result)
            self.assert_access('/admin/group/edit/admin', result)
            
            self.assert_access('/admin/permission/list', result)
            self.assert_access('/admin/permission/create', result)
            self.assert_access('/admin/permission/edit/admin', result)
        
        assert_access_all(False)
        self.login_user('tester', 'testerpass')
        assert_access_all(False)
        self.login_user('admin', 'adminpass')
        assert_access_all(True)
        self.login_user('tester', 'testerpass')
        assert_access_all(False)
        self.login_user('admin', 'adminpass')
        assert_access_all(True)
        self.logout()
        assert_access_all(False)

    def test_create_user(self):
        group_model = GroupModel(self.testapp.session)
        user_model = UserModel(self.testapp.session)

        user_name = 'foobar'
        display_name = 'Foo Bar'
        password = 'my_super_pwd'
        email = 'foobar@example.com'
        url = '/admin/user/create'

        self.login_user('admin', 'adminpass')
        res = self.testapp.get(url)
        csrf_token = self.get_csrf_token(res)

        with transaction.manager:
            group1 = group_model.create(
                group_name='group1', 
                display_name='group1', 
            )
            group2 = group_model.create(
                group_name='group2', 
                display_name='group2', 
            )

        params = [
            ('user_name', user_name),
            ('display_name', display_name),
            ('password', password),
            ('email', email),
            ('groups', group1.guid),
            ('groups', group2.guid),
        ]

        # test bad csrf token
        self.testapp.post(url, params, status=400)
        self.testapp.post(
            url, 
            params + [('csrf_token', 'bad_csrf')], 
            status=400,
        )

        self.testapp.post(
            url, 
            params + [('csrf_token', csrf_token)],
        )
        user = user_model.get_by_name(user_name)
        self.assertEqual(user.user_name, user_name)
        self.assertEqual(user.display_name, display_name)
        self.assertEqual(user.email, email)
        self.assertEqual(set(user.groups), set([group1, group2]))

        params = dict(
            name_or_email=user_name, 
            password=password
        )
        self.testapp.post('/login', params, status='3*')

    def test_edit_user(self):
        group_model = GroupModel(self.testapp.session)
        user_model = UserModel(self.testapp.session)

        with transaction.manager:
            user = user_model.create(
                user_name='foobar', 
                display_name='foobar', 
                password='foobarpass', 
                email='foobar@example.com'
            )
            group1 = group_model.create(
                group_name='group1', 
                display_name='group1', 
            )
            group2 = group_model.create(
                group_name='group2', 
                display_name='group2', 
            )
            user_model.update(user=user, groups=[group1, group2])

        url = '/admin/user/edit/{}'.format(user.user_name)
        display_name = 'new name'
        password = 'foobarpass'
        email = 'new_email@example.com'

        self.login_user('admin', 'adminpass')
        res = self.testapp.get(url)
        csrf_token = self.get_csrf_token(res)

        params = [
            ('display_name', display_name),
            ('password', password),
            ('email', email),
            ('groups', group1.guid),
            ('groups', group2.guid),
        ]

        # test bad csrf token
        self.testapp.post(url, params, status=400)
        self.testapp.post(
            url, 
            params + [('csrf_token', 'bad_csrf')], 
            status=400,
        )

        self.testapp.post(
            url, 
            params + [('csrf_token', csrf_token)],
        )
        self.assertEqual(user.display_name, display_name)
        self.assertEqual(user.email, email)
        self.assertEqual(set(user.groups), set([group1.guid, group2.guid]))

        params = dict(
            name_or_email=user.user_name, 
            password=password
        )
        self.testapp.post('/login', params, status='3*')

    def test_create_group(self):
        group_model = GroupModel(self.testapp.session)
        permission_model = PermissionModel(self.testapp.session)

        with transaction.manager:
            permission1 = permission_model.create(
                permission_name='permission1', 
                display_name='permission1',
            )
            permission2 = permission_model.create(
                permission_name='permission2', 
                display_name='permission2',
            )

        group_name = 'foobar'
        display_name = 'Foo Bar'
        url = '/admin/group/create'

        self.login_user('admin', 'adminpass')
        res = self.testapp.get(url)
        csrf_token = self.get_csrf_token(res)

        params = [
            ('group_name', group_name),
            ('display_name', display_name),
            ('permissions', permission1.guid),
            ('permissions', permission2.guid),
        ]

        # test bad csrf token
        self.testapp.post(url, params, status=400)
        self.testapp.post(
            url,
            params + [('csrf_token', 'bad_csrf')], 
            status=400,
        )

        self.testapp.post(
            url,
            params + [('csrf_token', csrf_token)],
        )
        group = group_model.get_by_name(group_name)
        self.assertEqual(group.group_name, group_name)
        self.assertEqual(group.display_name, display_name)
        self.assertEqual(set(group.permissions), 
                         set([permission1, permission2]))

    def test_edit_group(self):
        group_model = GroupModel(self.testapp.session)
        permission_model = PermissionModel(self.testapp.session)

        with transaction.manager:
            permission1 = permission_model.create(
                permission_name='permission1', 
                display_name='permission1',
            )
            permission2 = permission_model.create(
                permission_name='permission2', 
                display_name='permission2',
            )
            group = group_model.create(
                group_name='foobar', 
                display_name='foobar', 
                permissions=[permission1, permission2],
            )

        group_name = 'new name'
        display_name = 'new display_name'
        url = '/admin/group/edit/{}'.format(group.group_name)

        self.login_user('admin', 'adminpass')
        res = self.testapp.get(url)
        csrf_token = self.get_csrf_token(res)

        params = [
            ('group_name', group_name),
            ('display_name', display_name),
            ('permissions', permission2.guid),
        ]

        # test bad csrf token
        self.testapp.post(url, params, status=400)
        self.testapp.post(
            url,
            params + [('csrf_token', 'bad_csrf')], 
            status=400,
        )

        self.testapp.post(
            url,
            params + [('csrf_token', csrf_token)],
        )
        group = group_model.get_by_name(group_name)
        self.assertEqual(group.group_name, group_name)
        self.assertEqual(group.display_name, display_name)
        self.assertEqual(set(group.permissions), set([permission2]))

    def test_create_permission(self):
        permission_model = PermissionModel(self.testapp.session)

        permission_name = 'foobar'
        display_name = 'Foo Bar'
        url = '/admin/permission/create'

        self.login_user('admin', 'adminpass')
        res = self.testapp.get(url)
        csrf_token = self.get_csrf_token(res)

        params = [
            ('permission_name', permission_name),
            ('display_name', display_name),
        ]

        # test bad csrf token
        self.testapp.post(url, params, status=400)
        self.testapp.post(
            url,
            params + [('csrf_token', 'bad_csrf')], 
            status=400,
        )

        self.testapp.post(
            url,
            params + [('csrf_token', csrf_token)],
        )
        permission = permission_model.get_by_name(permission_name)
        self.assertEqual(permission.permission_name, permission_name)
        self.assertEqual(permission.display_name, display_name)

    def test_edit_permission(self):
        permission_model = PermissionModel(self.testapp.session)

        with transaction.manager:
            permission = permission_model.create(
                permission_name='foobar', 
                display_name='foobar',
            )

        permission_name = 'new name'
        display_name = 'new display_name'
        url = '/admin/permission/edit/{}'.format(permission.permission_name)

        self.login_user('admin', 'adminpass')
        res = self.testapp.get(url)
        csrf_token = self.get_csrf_token(res)

        params = [
            ('permission_name', permission_name),
            ('display_name', display_name),
        ]

        # test bad csrf token
        self.testapp.post(url, params, status=400)
        self.testapp.post(
            url,
            params + [('csrf_token', 'bad_csrf')], 
            status=400,
        )

        self.testapp.post(
            url,
            params + [('csrf_token', csrf_token)],
        )
        permission = permission_model.get_by_name(permission_name)
        self.assertEqual(permission.permission_name, permission_name)
        self.assertEqual(permission.display_name, display_name)
